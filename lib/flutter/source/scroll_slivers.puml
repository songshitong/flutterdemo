@startuml

abstract class ScrollView{
  List<Widget> buildSlivers(BuildContext context)
  Widget buildViewport(BuildContext context,ViewportOffset offset,AxisDirection axisDirection,List<Widget> slivers)
  Widget build(BuildContext context)
}
'note right of ScrollView{
'  定义：滚动的widget
'  可滚动widget由三部分组成:
'    1 一个[Scrollable]widget，用于监听各种用户手势和实现滚动的交互设计
'    2 一个视口窗口widget，例如[Viewport]或[ShrinkWrappingViewport]通过仅显示滚动视图中widget的部分来实现滚动的视觉设计
'    3 一个或多个slivers，它们是可以组成创建各种滚动效果，例如列表，网格和扩展标题的widget
'  [ScrollView]通过创建[Scrollable]和视口并推迟到其子类来创建slivers来帮助编排这些片段
'  要控制滚动视图的初始滚动偏移，请提供设置了[ScrollController.initialScrollOffset]属性的[controller]
'
'  buildSlivers 构建要放置在视口内的窗口widget列表,子类应重写此方法以构建视口内部的slivers
'  buildSlivers 构建视口 子类可以重写此方法以更改视口的构建方式。如果[shrinkWrap]为true，则默认实现使用[ShrinkWrappingViewport]，否则使用常规[Viewport]
'
'  build 重写方法，将通过buildSlivers从子类获取的widget列表，通过buildSlivers构建的viewport和Scrollable这
'        三者组装到一起
'}

abstract class BoxScrollView{
  List<Widget> buildSlivers(BuildContext context)
  Widget buildChildLayout(BuildContext context)
}
'note left of BoxScrollView{
'  定义：使用单个子布局模型的[ScrollView]
'  buildSlivers: 重写ScrollView的方法，将从buildChildLayout获取的widget包裹在SliverPadding中，将其作为list返回
'  buildChildLayout :子类应重写此方法以构建布局模型 获取子类构建的widget
'}

class CustomScrollView{
   final List<Widget> slivers
   List<Widget> buildSlivers(BuildContext context)
}
'note right of CustomScrollView{
'  定义：使用slivers创建自定义滚动效果的[ScrollView]
'  [CustomScrollView]允许您直接提供[slivers]以创建各种滚动效果，例如列表，网格和扩展标题.例如，创建一个滚动视图，其中包含一个展开的app bar，
'  后跟一个列表和网格，使用三个slivers列表：[SliverAppBar]，[SliverList]，和[SliverGrid]
'
'
'   CustomScrollView必须接受       viewport 在CustomScrollView的父类ScrollView中
'  [Widget]中的[slivers]必须生成[RenderSliv​​er]对象，Viewport的createRenderObject为RenderViewport，而RenderViewport的父类RenderViewportBase
'      接受一个RenderSliver范型

'  要控制滚动视图的初始滚动偏移，请提供设置了[ScrollController.initialScrollOffset]属性的[controller]
'  [CustomScrollView]可以允许滚动状态更改时Talkback / VoiceOver通知用户。例如，在Android上公告可能被解读为“显示第1项至23项中的第10项”
'     生产这个公告，滚动视图需要三条信息：
'        1 第一个可见的子的索引index
'        2 孩子总数
'        3 可见孩子的总数
'  最后一个值可以由框架精确计算，但是前两个必须提供。大多数更高级别的可滚动widget自动提供此信息.例如，[ListView]为每个子widget自动提供
'    具有语义索引设并设置语义子级列表的长度
'  要确定可见索引，滚动视图需要一种方式关联每个可滚动item和一个语义索引index生成的语义。这个可以通过将子窗口小部件包装在[IndexedSemantics]中来完成
'  此语义索引不一定与可滚动widget的索引相同.因为某些小部件可能无法提供语义信息.考虑一个[new ListView.separated（）]：每个其他小部件都是
'  没有语义信息的分隔符.在这种情况下，只有奇数编号widget有一个语义索引（等于索引〜/ 2）.而且，此示例中的子项总数将是widgets数量的一半.
'    （[new ListView.separated（）]构造函数自动处理此问题.这仅用于此处作为示例
'  可见子项的总数可以通过构造函数参数`semanticChildCount`提供，这应该始终与[IndexedSemantics]中包含的小部件数相同
'
'  buildSlivers 重写方法，将slivers返回
'}

class ListView{
   Widget buildChildLayout(BuildContext context)
}

'note left of ListView{
'  buildChildLayout方法重写，如果子在滚动方向宽度itemExtent确定，返回SliverFixedExtentList，不确定则返回SliverList。这两者都是接受
'    SliverChildDelegate作为参数，至此将普通widget转换为sliver系列
'}

class GridView {
   Widget buildChildLayout(BuildContext context)
}
'note right of GridView{
'   重写buildChildLayout方法将SliverGridDelegate和SliverChildDelegate包装进SliverGrid返回
'}

class Scrollable{
  final bool excludeFromSemantics
  ScrollableState createState()
}

'note left of Scrollable{
'  定义：滚动的的widget
'  excludeFromSemantics  此[Scrollable]引入的滚动操作是否在语义树中公开,带溢出的文本字段通常是可滚动的，以确保用户可以到达输入文本的开头结尾.
'     但是，这些滚动操作通常不会暴露给语义层
'}

class ScrollableState{
   Widget build(BuildContext context)
}
'note left of ScrollableState{
'   build 重写方法，excludeFromSemantics为false，创建_ScrollSemantics，为true,创建_ScrollableScope。最后将结果通过ScrollBehavior的
'      buildViewportChrome创建widget
'
'       _ScrollableScope负责ScrollPosition的通知，RawGestureDetector负责手势，滚动通知
'}

class Viewport{
   final double anchor
   final ViewportOffset offset
   final Key center
   final double cacheExtent
   RenderViewport createRenderObject(BuildContext context)
}


'note right of Viewport{
'  定义： 内部更大的widget
'  [Viewport]是滚动机械的视觉主力。它根据其自身的维度和给定的[offset]显示一个children的子集。随着偏移量的变化，可以通过视口看到不同的孩子
'  [Viewport]主持一个双向的条子列表，锚定在位于零滚动偏移处的[center]sliver,中心小部件是根据[anchor]属性显示在视口中
'  子列表中早于[center]的sliver以反向[axisDirection]从[center]开始的逆序显示，例如，如果[axisDirection]是[AxisDirection.down]，
'   那么在center之前的第一个sliver位于[center]上方。子列表比[center]后来的条子,按顺序放在[axisDirection]中。例如，在前面的场景中，
'   [center]之后的第一个条子是位于[中心]下方
'  [视口]不能直接包含盒子类型的child。相反，使用[SliverList]，[SliverFixedExtentList]，[SliverGrid]或者 [SliverToBoxAdapter]
'
'  anchor 零滚动偏移的相对位置,例如，如果[anchor]为0.5且[axisDirection]为[AxisDirection.down]或[AxisDirection.up]，
'      则零滚动偏移量在视口中垂直居中.如果[anchor]为1.0，并且[axisDirection]为[AxisDirection.right]，则零滚动偏移为视口左边缘
'  offset 视口内的哪部分内容应该是可见的.[ViewportOffset.pixels]值确定视口用于选择要显示其内容的哪个部分的滚动偏移量.当用户滚动视口时，
'     此值会更改，这会更改显示的内容.通常是[ScrollPosition]
'  center [GrowthDirection.forward]增长方向的第一个孩子.[center]必须是ViewPort的child的key
'  cacheExtent 预加载？？ 在RenderViewportBase中有解释，视口在可见区域之前和之后有一个区域，用于缓存在用户滚动时即将变为可见的项目。落在此缓存区域中
'     的项目即使它们在屏幕上不是（还）可见，也会被布局。[cacheExtent]描述缓存区域在视口前端之前和后端之后延伸的像素数。
'     视口将尝试覆盖children的总范围是 前端前的[cacheExtent]+主轴的范围+后端后的[cacheExtent]
'     缓存区域还用于在iOS上实现隐式可访问性滚动，当辅助功能焦点从可见的视口中的项移动到缓存区中的不可见项时，框架将使用（隐式）滚动操作
'        将该项目带入视图
'}

class RenderViewport{
   void performResize()
   void performLayout()
}
'note right of RenderViewport{
' 内部较大的渲染对象
' [RenderViewport]是滚动机械的视觉主力,它根据自己的维度和给出的[偏移]显示一个子项的子集，随着偏移量的变化，可以在视口中看到不同的孩子
' [RenderViewport]托管一个双向的条子列表，锚定在一个[center] sliver，位于零滚动偏移处。中心widget根据[anchor]属性显示在视口中
' 显示子列表中早于[中心]的条带从[center]开始反向[axisDirection]的逆序展示
' [RenderViewport]不能直接包含[RenderBox]子项。相反，使用 [RenderSliv​​erList]，[RenderSliv​​erFixedExtentList]，[RenderSliv​​erGrid]或
' [RenderSliv​​erToBoxAdapter]
'
'    performResize()  将viewport大小给Viewportoffset
'    performLayout   _attemptLayout->layoutChildSequence 返回correction->offset.correctBy(correction)
'                   通过offset确定整页的滚动偏移
'}

abstract class RenderViewportBase{
   ViewportOffset get offset

   double layoutChildSequence({required RenderSliver child,
       @required double scrollOffset,
       @required double overlap,
       @required double layoutOffset,
       @required double remainingPaintExtent,
       @required double mainAxisExtent,
       @required double crossAxisExtent,
       @required GrowthDirection growthDirection,
       @required RenderSliver advance(RenderSliver child),
       @required double remainingCacheExtent,
       @required double cacheOrigin,
     })
}
'note right of RenderViewportBase{
'  内部较大的渲染对象的基类
'  此render object为的[RenderBox]中持有[RenderSliv​​er]的render对象提供共享代码
'  视口建立一个[axisDirection]，它定位了条子的坐标系，即基于滚动偏移而不是笛卡尔坐标
'  视口还会侦听[offset]，它决定了[SliverConstraints.scrollOffset]输入到条子布局协议
'  子类通常覆盖[performLayout]并调用[layoutChildSequence]，也许多次
'
'  layoutChildSequence() 决定viewport中children的大小和位置，此函数是子类中“performlayout”实现的主力。
'     布局以“child”开头，根据“advance”回调继续，并在“advance”返回空值时停止
'     返回遇到的第一个非零[Slivergometry.ScrollOffsetCorrection]，如果有的话。否则返回0.0。典型的调用者将重复调用此函数，直到它返回0.0
'
'     最终调用RenderSliver的layout进行布局
'
'   offset 视口中的内容的哪个部分应该可见 [viewport offset.pixels]值决定了视窗用来选择要显示的内容部分的滚动偏移量。
'      当用户滚动视区时，此值将更改，这将更改显示的内容。
'
'}

class SliverConstraints{

}

abstract class ViewportOffset{
   double get pixels
   bool applyViewportDimension(double viewportDimension)
   void correctBy(double correction)
}

'note right of ViewportOffset{
'  视口中的内容的哪个部分应该可见 [viewport offset.pixels]值决定了视窗用来选择要显示的内容部分的滚动偏移量。
'         当用户滚动视区时，此值将更改，这将更改显示的内容。
'}

abstract class ScrollPosition{


}

class ScrollPositionWithSingleContext{

}

class ScrollController {
  ScrollPosition createScrollPosition(ScrollPhysics physics,ScrollContext context,ScrollPosition oldPosition)
}

'note right of ScrollController{
'   createScrollPosition  创建供[Scrollable]widget使用的[ScrollPosition]
'
'}


abstract class RenderSliver{
   SliverGeometry _geometry
}

'note right of RenderSliver{
'   在视口中实现滚动效果的渲染对象的基类
'   [RenderViewport]有一个子条的列表。每个条子 - 字面上一个视口内容的切片 - 依次布局，在这个过程中覆盖视口（每次都会布置每条条子，
'      包括那些范围为零的因为它们“滚动”或超出范围视口的结尾。）
'   Slivers参与_sliver protocol_，其中在[layout]期间各自 sliver接收[SliverConstraints]对象并计算相应的描述它在视口中的位置[SliverGeometry]对象
'    这是类似于[RenderBox]使用的盒子协议，它得到一个 [BoxConstraints]作为输入并计算[Size]
'   Slivers有一个前沿，这是[SliverConstraints.scrollOffset]所描述的sliver开始的位置。条子有几个维度，其主要部分是[SliverGeometry.paintExtent]，
'     描述沿主轴的条子范围，从前沿开始到达视口的末端或结束sliver，以先到者为准
'   Slivers可以根据非线性时尚中不断变化的约束来改变尺寸，实现各种滚动效果
'   例如，各种[RenderSliv​​erPersistentHeader]子类，[SliverAppBar]基于此，尽管滚动偏移，仍能保持可见效果，或根据用户的滚动方向
'      [SliverConstraints.userScrollDirection]重新出现在不同的偏移处
'
'   编写RenderSliv​​er子类
'      Slivers可以有sliver孩子，或者来自另一个坐标系统的孩子，通常是盒子.有关盒子协议的详细信息，请参阅[RenderBox]。）
'      Slivers也可以有不同的子模型，通常有一个孩子或一个孩子的列表
'
'   条子的例子
'    一个单一孩子的条子的一个很好的例子，它本身也是一个条子，是[RenderSliv​​erPadding]，缩进其子项。条子到条子的render object
'    这样的对象必须为它孩子构造一个[SliverConstraints]对象，然后必须拿它的孩子的[SliverGeometry]并用它来形成它的[geometry]
'    另一种常见的独生子条是一条拥有单一[RenderBox]孩子的条子。一个例子是[RenderSliv​​erToBoxAdapter]，它放置一个盒子并在盒子周围自行调整大小
'      这样的条子必须使用其[SliverConstraints]为child创建[BoxConstraints]，将孩子布局（使用孩子的[layout]方法），
'       然后使用孩子的[RenderBox.size]生成条子的[SliverGeometry]。
'    最常见的条子是有多个孩子的条子。该最直接的例子是[RenderSliv​​erList]，它在主轴方向上一个接一个排列着它的children.和one-box-child sliver例子一样
'      它使用它的[constraints]来为孩子们创建一个[BoxConstraints]，然后它使用聚合来自其所有孩子的信息以生成其[geometry].不像一个孩子的案例，
'      然而，它处理实际上放置的孩子(和后面的 paints)是明智的。如果滚动偏移是1000像素，那么先前确定前三个孩子每个都是400像素高，
'      然后它将跳过前两个并以第三个孩子开始布局
'
'    Layout
'
'      当它们被布置时，条子决定它们的[geometry]，包括它们size（[SliverGeometry.paintExtent]）和下一个条子的位置（[SliverGeometry.layoutExtent]），
'      以及每个children的位置，基于视口的输入[constraints]，例如滚动偏移量（[SliverConstraints.scrollOffset]
'      例如，只是画一个100像素高的盒子的条子会说,当滚动偏移为零时，它[SliverGeometry.paintExtent]为100像素，
'      但是当滚动偏移量为75像素时它的[SliverGeometry.paintExtent]是25像素，并且当滚动偏移量为100像素或更多时，它会为零(这是假设
'      [SliverConstraints.remainingPaintExtent]超过100像素)
'      作为该系统的输入提供的各种尺寸在[constraints],它们在文档中有详细描述[SliverConstraints]类.[performLayout]函数必须采用这些[constraints]
'       并创建一个SliverGeometry]对象，它必须分配给[geometry]属性.可配置的几何体的不同尺寸是[SliverGeometry]类的文档中详细描述
'
'    Painting
'      除了实现布局外，条子还必须实现绘画。这是通过覆盖[paint]方法实现的
'      调用[paint]方法 使用[Canvas]带有以条子的左上角原点，_无论轴方向_的[Offset]
'      子类也应该覆盖[applyPaintTransform]来提供[Matrix4]描述每个孩子相对于条子的位置（除了其他方面，这由可访问性层使用，以确定孩子的界限。）
'
'    Hit testing
'      要实现命中测试，请覆盖[hitTestSelf]和[hitTestChildren]方法，或者，对于更复杂的情况，改为直接覆盖[hitTest]方法
'      要实际对指针事件做出反应，[handleEvent]方法可能是实现，默认情况下它什么都不做。 （通常手势由框协议中的widgets处理而不是直接的条子)
'
'    Helper methods
'      sliver应该实施的方法有很多种,这些使其他方法更容易实现。下面列出的每种方法文档都有详细说。此外，[RenderSliv​​erHelpers]类可用于
'      混合一些有用的方法
'
'    childScrollOffset
'      如果子类将子项定位在滚动偏移零以外的任何位置，它应该覆盖[childScrollOffset]。例如，[RenderSliv​​erList]和[RenderSliv​​erGrid]重写此方法，
'      但是[RenderSliv​​erToBoxAdapter]没有
'      除其他外，[Scrollable.ensureVisible]使用它
'
'    childMainAxisPosition
'      子类应该实现[childMainAxisPosition]来描述它们孩子们被定位的位置
'    childCrossAxisPosition
'      如果子类将子children放在横轴的另一个非0位置，然后它应该覆盖[childCrossAxisPosition]。例如 [RenderSliv​​erGrid]会覆盖此方法
'
'
'
'      _geometry sliver所占的空间  在viewport的performlayout中使用
'}

class SliverGeometry{
   final double scrollExtent
   final double paintExtent
   final double maxPaintExtent
   final double cacheExtent
   final bool hasVisualOverflow
}

'note right of SliverGeometry{
'   描述RenderSliver占据的空间。 sliver可以以几种不同的方式占用空间，这就是这个类包含多个值的原因。
'   scrollExtent 此条具有内容的（估计的）总可滚动范围。  这是用户从这个条开始到这个条结束所需的滚动量。
'     该值用于计算可滚动条中所有条目的[SliverConstraints.ScrollOffset]，因此无论条当前是否在视口中，都应提供该值
'     在典型的滚动场景中，在整个滚动过程中，[ScrollExtent]对于一个小条是恒定的，而[PaintExtent]和[LayoutExtent]将从屏幕外的“0”前进到“0”和[ScrollExtent]之间，
'        因为小条部分滚动到屏幕内外，并且等于[ScrollExtent]，而小条是完全滚动的在屏幕上。但是，可以自定义这些关系以获得更多的特殊效果
'      如果[PaintExtent]小于布局期间提供的[SliveConstraints.RemainingPaintExtent]，则此值必须准确。
'
'   paintExtent  在当前视图中，条带所呈现的当前可见可视空间的数量，该条带覆盖了全部或部分[SliverConstraints.remainingPaintExtent]的条带子集。
'       此值不影响下一条棉条的定位方式。换句话说，如果该值为100，[layoutextent]为0，则放置在其后面的典型切片在绘制时最终将绘制在相同的100像素空间中。
'       这必须介于0和[SliveConstraints.RemainingPaintExtent]之间
'       此值通常在视口外为0，并且在滚动条进出视口时从0长大或缩小到0，除非滚动条希望获得特殊效果并在滚动时绘制。
'       这有助于计算下一条棉条的[SliverConstraints.overlap]

'   maxPaintExtent  如果[SliverConstraints.remainingPaintExtent]是无限的，这个条目的总paint量将能够提供
'        这由实现shrink-wrapping的视口使用，根据定义，这不能小于[paintextent]。
'   cacheExtent 在[SliverConstraints.RemainingCacheExtent]中，sliver消耗了多少像素
'        此值应等于或大于[LayoutExtent]，因为小条始终至少使用[SliveConstraints.RemainingCacheExtent]中的[LayoutExtent]，
'        如果它落在视区的缓存区域中，则可能会使用更多。
'   hasVisualOverflow 此条是否有视觉溢出
'        默认情况下，该值为false，这意味着视口不需要剪裁其子对象。如果任何片段有视觉溢出，则该视口将对其子对象应用剪辑。
'}



abstract class RenderSliverMultiBoxAdaptor{
   final RenderSliverBoxChildManager _childManager
   final Map<int, RenderBox> _keepAliveBucket
}
'note right of RenderSliverMultiBoxAdaptor{
'  有多个box children的sliver
'  [RenderSliv​​erMultiBoxAdaptor]是具有多个box children的条子的基类.子项由[RenderSliv​​erBoxChildManager]管理，允许子类在布局期间懒惰地创建子​​项
'  通常子类只会创建实际需要填充[SliverConstraints.remainingPaintExtent]的子项
'  从渲染对象添加和删除子项的合同是比普通渲染对象更严格
'     如果他们已经在布局过程中布局，除布局过程，儿童可以被移除
'     除了在[childManager]的调用期间，不能添加子项，然后仅当没有与该索引（或子项）对应的子项时（首先删除了与该索引对应的子项）
'   _keepAliveBucket 尽管节点不可见，但仍保持活动状态
'}

class RenderSliverFixedExtentBoxAdaptor{

}
class RenderSliverList{

}

class RenderSliverGrid{

}



class RenderSliverFixedExtentList{
}

class SliverFixedExtentList{
}

class RenderSliverFillViewport{

}
abstract class SliverMultiBoxAdaptorWidget {
   final SliverChildDelegate delegate
   SliverMultiBoxAdaptorElement createElement() => SliverMultiBoxAdaptorElement(this)
}

'note right of SliverMultiBoxAdaptorWidget{
'  定义：有多个盒子的条子的基类
'  使用[SliverChildDelegate]帮助子类懒惰地构建他们的孩子
'}
class SliverList{
  RenderSliverList createRenderObject(BuildContext context)
}

class SliverGrid{
   final SliverGridDelegate gridDelegate
   RenderSliverGrid createRenderObject(BuildContext context)
   void updateRenderObject(BuildContext context, RenderSliverGrid renderObject)
}
class SliverFixedExtentList{
  final double itemExtent
  RenderSliverFixedExtentList createRenderObject(BuildContext context)
  void updateRenderObject(BuildContext context, RenderSliverFixedExtentList renderObject)
}

class SliverFillViewport{
  final double viewportFraction
  RenderSliverFillViewport createRenderObject(BuildContext context)
  void updateRenderObject(BuildContext context, RenderSliverFillViewport renderObject)
}
'note right of SliverFillViewport{
'  包含多个子框的子条，每个子框填充视口
'  [SliverFillViewport]将其子项放在主轴的线性数组中
'  每个孩子的大小都可以填充视口，包括主视图和cross轴
'  viewportFraction 每个子项应填充主轴的视口部分,如果此分数小于1.0，则在一次可以看到多个子项,如果此分数大于1.0，则每个子项将大于主轴中的视口
' }

class SliverToBoxAdapter{
   RenderSliverToBoxAdapter createRenderObject(BuildContext context) => RenderSliverToBoxAdapter()
}
'note right of SliverToBoxAdapter{
'  包含单个box widget的sliver
'  Slivers是特殊用途的小部件，可以使用 [CustomScrollView]组合创建自定义滚动效果
'  一个[SliverToBoxAdapter]是一个基本的条子，它创建了返回一个基于通常盒子的桥梁
'  使用多个[SliverToBoxAdapter]小部件来显示多个[CustomScrollView]中的框小部件，考虑使用[SliverList]，[SliverFixedExtentList]，
'   [SliverPrototypeExtentList]或[SliverGrid]，那些更有效，因为它们只实例化那些实际上是通过滚动视图的视口可见的孩子
'}
class RenderSliverToBoxAdapter{
   void performLayout()
}
'note right of RenderSliverToBoxAdapter{
'  包含单个[RenderBox]的[RenderSliv​​er]
'  如果不可见，孩子将不会被布置。它的大小根据对主轴中孩子的偏好，并有严格的约束,将其强制为横轴的视口尺寸
'}

class SliverFillRemaining{
  RenderSliverFillRemaining createRenderObject(BuildContext context)
}
'note right of SliverFillRemaining{
'  包含单个盒子的条子，填充剩余的视口空间
'  [SliverFillRemaining]调整其子项的大小以填充cross轴中的视口并填充主轴视口中的剩余空间
'  通常，这将是视口中的最后一个条子，因为（根据定义）除了这条条子之外，什么都没有空间
'}

class RenderSliverFillRemaining{
  void performLayout()
}



StatelessWidget <|-- ScrollView
ScrollView      <|-- BoxScrollView
ScrollView      <|-- CustomScrollView
ScrollView      <.. Scrollable
ScrollView      <.. Viewport

BoxScrollView   <|-- ListView
BoxScrollView   <|-- GridView

StatefulWidget  <|-- Scrollable
Scrollable      <.. ScrollableState
MultiChildRenderObjectWidget <|-- Viewport
Viewport <.. RenderViewport
RenderViewportBase <|-- RenderViewport
RenderViewportBase <.. RenderSliver
RenderViewportBase <.. ViewportOffset
ViewportOffset     <|-- ScrollPosition
ScrollPosition     <|--  ScrollPositionWithSingleContext

RenderViewport <.. RenderSliver

RenderObject <|-- RenderSliver

RenderSliver <|-- RenderSliverMultiBoxAdaptor
RenderSliver <|-- RenderSliverSingleBoxAdapter
RenderSliver <.. SliverGeometry

RenderSliverMultiBoxAdaptor <|-- RenderSliverList
RenderSliverMultiBoxAdaptor <|-- RenderSliverGrid
RenderSliverMultiBoxAdaptor <|-- RenderSliverFixedExtentBoxAdaptor
RenderSliverFixedExtentBoxAdaptor <|-- RenderSliverFixedExtentList
RenderSliverFixedExtentBoxAdaptor <|-- RenderSliverFillViewport
RenderObjectWidget          <|-- SliverWithKeepAliveWidget
SliverWithKeepAliveWidget   <|-- SliverMultiBoxAdaptorWidget
SliverMultiBoxAdaptorWidget <|-- SliverList
SliverMultiBoxAdaptorWidget <|-- SliverGrid
SliverMultiBoxAdaptorWidget <|-- SliverFixedExtentList
SliverMultiBoxAdaptorWidget <|-- SliverFillViewport

SliverList                  <..  RenderSliverList
SliverFixedExtentList       <..  RenderSliverFixedExtentList
SliverGrid                  <..  RenderSliverGrid
SliverFillViewport          <..  RenderSliverFillViewport

RenderObjectWidget            <|-- SingleChildRenderObjectWidget
SingleChildRenderObjectWidget <|-- SliverToBoxAdapter
SingleChildRenderObjectWidget <|-- SliverFillRemaining

RenderSliverSingleBoxAdapter  <|-- RenderSliverToBoxAdapter
RenderSliverSingleBoxAdapter  <|-- RenderSliverFillRemaining
SliverToBoxAdapter          <..  RenderSliverToBoxAdapter
SliverFillRemaining         <..  RenderSliverFillRemaining
@enduml